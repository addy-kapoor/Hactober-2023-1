class Solution
{
    void findAll(int i, int j, String s1, String s2, int l1, int l2, StringBuilder sb, TreeSet<String> hs, int maxLength)
    {
        if(maxLength == 0)
        {
            hs.add(sb.toString());
        }
        
        if(i >= l1 || j >= l2)
        {
            return;    
        }
        
        for(int k = i ; k < l1 ; k++)
        {
            for(int l = j ; l < l2 ; l++)
            {
                if(s1.charAt(k) == s2.charAt(l))
                {
                    sb.append(s1.charAt(k));
                    findAll(k+1, l+1, s1, s2, l1, l2, sb, hs, maxLength-1);
                    sb.deleteCharAt(sb.length()-1);
                }
            }
        }
    }
    public List<String> all_longest_common_subsequences(String s1, String s2)
    {
        // Code here
        int n=s1.length();
        int m=s2.length();
    
        int dp[][]=new int[n+1][m+1];
        for(int i=0;i<=n;i++){
            dp[i][0] = 0;
        }
        for(int i=0;i<=m;i++){
            dp[0][i] = 0;
        }
        
        for(int ind1=1;ind1<=n;ind1++){
            for(int ind2=1;ind2<=m;ind2++){
                if(s1.charAt(ind1-1)==s2.charAt(ind2-1))
                    dp[ind1][ind2] = 1 + dp[ind1-1][ind2-1];
                else
                    dp[ind1][ind2] = 0 + Math.max(dp[ind1-1][ind2],dp[ind1][ind2-1]);
            }
        }
        int maxLength = dp[n][m];
        TreeSet<String> hs = new TreeSet<>();
        StringBuilder sb = new StringBuilder();
        findAll(0, 0, s1, s2, s1.length(), s2.length(), sb, hs, maxLength);
        List<String> res = new ArrayList<>(hs);
        return res;
    }
}
